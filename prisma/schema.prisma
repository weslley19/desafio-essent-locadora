// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma generate
// rodar sempre que alterar o schema
// npx prisma migrate dev --name added_job_title  rodar migrate
// npx prisma studio

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

// Definition of the Person model
model Person {
  id             Int              @id @default(autoincrement())
  name           String
  birthday       DateTime
  cpf            String           @unique
  createdAt      DateTime?        @default(now()) @map(name: "created_at")
  updatedAt      DateTime?        @updatedAt @map(name: "updated_at")
  TypePersonType TypePersonType[]
  movies         Movie[]          @relation("MovieCast")
  directedMovies Movie[]          @relation("DirectedMovies")
  Rental         Rental[]
}

// Definition of the TypePerson model
model TypePerson {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime?        @default(now()) @map(name: "created_at")
  updatedAt      DateTime?        @updatedAt @map(name: "updated_at")
  TypePersonType TypePersonType[]
}

// Definition of the TypePersonType model
model TypePersonType {
  id           Int        @id @default(autoincrement())
  person       Person     @relation(fields: [personId], references: [id])
  personId     Int
  typePerson   TypePerson @relation(fields: [typePersonId], references: [id])
  typePersonId Int
  createdAt    DateTime?  @default(now()) @map(name: "created_at")
  updatedAt    DateTime?  @updatedAt @map(name: "updated_at")
}

model Movie {
  id              Int           @id @default(autoincrement())
  title           String
  releaseYear     Int
  image           String?
  synopsis        String
  categoryId      Int
  category        MovieCategory @relation(fields: [categoryId], references: [id])
  rentalValue     Float
  availableCopies Int
  directorId      Int
  director        Person        @relation("DirectedMovies", fields: [directorId], references: [id])
  createdAt       DateTime?     @default(now()) @map(name: "created_at")
  updatedAt       DateTime?     @updatedAt @map(name: "updated_at")
  cast            Person[]      @relation("MovieCast")
  Rental          Rental[]
}

model MovieCategory {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  movies    Movie[]
}

model Rental {
  id             Int       @id @default(autoincrement())
  renter         Person    @relation(fields: [renterId], references: [id])
  renterId       Int
  movie          Movie     @relation(fields: [movieId], references: [id])
  movieId        Int
  rentalDate     DateTime
  returnDate     DateTime
  returnDeadline DateTime
  lateFee        Float?
  totalAmount    Float
  status         String // [Regular, Late, Returned]
  createdAt      DateTime? @default(now()) @map(name: "created_at")
  updatedAt      DateTime? @updatedAt @map(name: "updated_at")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String          @unique
  password      String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
